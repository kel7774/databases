1. How do you find related data held in two separate data tables?

To find related data in two separate tables, you would perform a JOIN in your database. Depending on the nature of your data and what you're querying, you would use options to combine data with different conditions using WHERE or ON statements. You can also use different types of JOINS like RIGHT OUTER JOIN or LEFT OUTER JOIN to get the specific results that you want.

2. Explain, in your own words, the difference between an INNER JOIN, LEFT OUTER JOIN, and RIGHT OUTER JOIN. Give a real-world example for each.

An INNER JOIN is a join when you want to make sure that each table matches exactly the data you are querying. An example of this would be querying the quantity of items a grocery list table has with a column for the grocery item, and an invoice table with a column for the same thing, the grocery item.

A left outer join is a join when you are trying to combine data from the first table with the other table.

An example of this is combining film id's from a film table with their corresponding inventory id from an inventory id. 

A right outer join is a join when you are trying to combine data from the second table with the first table.

An example of this would be wanting to combine data from a table of cars sold with their color listed and a table of cars sold with their color and model listed. 


3. Define primary key and foreign key. Give a real-world example for each.

A primary key is a unique identifier for each row in a database.
A primary key would be the phone number of a friend in your phone.
A foregin key is the primary key of one table that is included as a non-unique attribute to another table.
A foreign key would be that friend's phone number, but the phone number is located in a list of volunteers for an event you're organizing. 

4. Define aliasing.

Aliasing is the technique of abbreviation with databases.

5. Change this query so that you are using aliasing:

SELECT p.name, c.salary, c.vacation_days
FROM professor AS p
JOIN compensation AS c
ON p.id = c.professor_id;

6. Why would you use a NATURAL JOIN? Give a real-world example.
You would use a natural join for tables that have a common column between the both of them. An example would be a restaurant menu table with columns for the item name and price and an inventory table with columns for the item name and the quantity of items. A NATURAL JOIN would be able to join the tables based off the common column of the item name.

7. Using this Employee schema and data, write queries to find the following information:
    a. List all employees and all shifts

    SELECT employees.name, scheduled_shifts.shift_id, shifts.date, shifts.start_time, shifts.end_time 
    FROM employees 
    INNER JOIN scheduled_shifts 
    ON employees.id = scheduled_shifts.employee_id 
    INNER JOIN shifts 
    ON shifts.id = scheduled_shifts.shift_id;

8. Using this Adoption schema and data, please write queries to retrieve the following information and include the results:
    a. Create a list of all volunteers. If the volunteer is fostering a dog, include each dog as well.

    SELECT * FROM volunteers 
    LEFT OUTER JOIN dogs 
    ON volunteers.foster_dog_id = dogs.id;

| id  | first_name | last_name  | address                    | phone_number | available_to_foster | foster_dog_id | id    | name      | gender | age | weight | breed              | intake_date              | in_foster |
| --- | ---------- | ---------- | -------------------------- | ------------ | ------------------- | ------------- | ----- | --------- | ------ | --- | ------ | ------------------ | ------------------------ | --------- |
| 2   | Rubeus     | Hagrid     | 1 Edge of Forbidden Forest | 256-667-2378 | true                | 10002         | 10002 | Munchkin  | F      | 0   | 8      | dachsund chihuahua | 2017-01-13T00:00:00.000Z |           |
| 5   | Marjorie   | Dursley    | 1990 Next Door to Fubster  | 463-528-2253 | true                | 10006         | 10006 | Marmaduke | M      | 7   | 150    | great dane         | 2016-03-22T00:00:00.000Z |           |
| 4   | Sirius     | Black      | 12 Grimmauld Place         | 878-666-4663 | true                |               |       |           |        |     |        |                    |                          |           |
| 3   | Remus      | Lupin      | 12 Grimmauld Place         | 627-283-3771 | true                |               |       |           |        |     |        |                    |                          |           |
| 1   | Albus      | Dumbledore | 99 Godric's Hollow         | 843-746-3649 | false               |               |       |           |        |     |        |                    |                          |           |


    b. The cat's name, adopter's name, and adopted date for each cat adopted within the past month to be displayed as part of the "Happy Tail" social media promotion which posts recent successful adoptions.
    
SELECT cats.name, adopters.first_name, cat_adoptions.date 
 24 -    FROM cats 
 25 -    INNER JOIN cat_adoptions 
 26 -    ON cats.id = cat_adoptions.cat_id 
 27 -    INNER JOIN adopters 
 28 -    ON adopters.id = cat_adoptions.adopter_id 
 29 -    WHERE cat_adoptions.date > now() - interval '1 month';

| name     | first_name | date                     |
| -------- | ---------- | ------------------------ |
| Mushi    | Arabella   | 2018-10-04T00:00:00.000Z |
| Victoire | Argus      | 2018-10-09T00:00:00.000Z |


    c. Create a list of adopters who have not yet chosen a dog to adopt.

     SELECT adopters.first_name, adopters.last_name
     FROM adopters 
     LEFT JOIN dog_adoptions 
     ON adopters.id = dog_adoptions.adopter_id 
     WHERE dog_adoptions.adopter_id IS NULL;

| first_name | last_name |
| ---------- | --------- |
| Hermione   | Granger   |
| Arabella   | Figg      |


    d. Lists of all cats and all dogs who have not been adopted.

    SELECT cats.name
    FROM cats
    LEFT JOIN cat_adoptions
    ON cats.id = cat_adoptions.cat_id
    WHERE cat_adoptions.cat_id IS NULL
    UNION
    SELECT dogs.name
    FROM dogs
    LEFT JOIN dog_adoptions
    ON dogs.id = dog_adoptions.dog_id
    WHERE dog_adoptions.dog_id IS NULL;


| name      |
| --------- |
| Boujee    |
| Lassie    |
| Marley    |
| Marmaduke |
| Munchkin  |
| Nala      |
| Seashell  |

    e. The name of the person who adopted Rosco.

    SELECT adopters.first_name, adopters.last_name
    FROM adopters
    JOIN dog_adoptions
    ON dog_adoptions.adopter_id = adopters.id
    JOIN dogs
    ON dogs.id = dog_adoptions.dog_id
    WHERE dogs.name = 'Rosco';

| first_name | last_name |
| ---------- | --------- |
| Argus      | Filch     |


9. Using this Library schema and data, write queries applying the following scenarios and include the results:
    a. To determine if the library should buy more copies of a given book, please provide the names and position, in order, of all of the patrons with a hold (request for a book with all copies checked out) on "Advanced Potion-Making".

        SELECT patrons.name, holds.rank
        FROM patrons
        JOIN holds
        ON patrons.id = holds.patron_id
        JOIN books
        ON books.isbn = holds.isbn
        WHERE books.isbn = '9136884926'
        ORDER BY holds.rank;

| name           | rank |
| -------------- | ---- |
| Terry Boot     | 1    |
| Cedric Diggory | 2    |


    b. List all of the library patrons. If they have one or more books checked out, list the books with the patrons.

        SELECT patrons.name, books.title
        FROM transactions
        JOIN books ON (books.isbn = transactions.isbn AND transactions.checked_out_date IS NOT NULL AND transactions.checked_in_date IS NULL)
        RIGHT OUTER JOIN patrons
        ON transactions.patron_id = patrons.id
        GROUP BY patrons.name, books.title
        ORDER BY patrons.name;


| name             | title                                   |
| ---------------- | --------------------------------------- |
| Cedric Diggory   | Fantastic Beasts and Where to Find Them |
| Cho Chang        |                                         |
| Hermione Granger |                                         |
| Padma Patil      |                                         |
| Terry Boot       | Advanced Potion-Making                  |
