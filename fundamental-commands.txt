1. List the commands for adding, updating, and deleting data.

Adding data - INSERT INTO
Updating data - UPDATE
Deleting - DELETE

2. Explain the structure for each type of command.

Inserting data - The structure is the command INSERT INTO, then specifying the table you are inserting data into.
`INSERT INTO books` would insert data into the products table. You have to name the values that you are inserting into the table. You would do this by entering in 
`INSERT INTO books, then listing the names of your columns, (title, author, id) VALUES, then listing your values in the order of your columns that you just listed
('1984', 'george orwell', 11899);
It would look like this all together:
INSERT INTO books VALUES
('1984', 'George Orwell', 11899);

Updating data - The structure is the command UPDATE, the name of your table, SET, the column or row you're updating, then the command WHERE and the row where the value needs to be updated.
Example: UPDATE books SET id=11799 WHERE title='1984';

Deleting data - The structure is the command DELETE FROM, the name of your table, the WHERE command and the column and value associated with the column where you want to delete the particular instance of data.

3. What are some of the data types that can be used in tables? Give a real-world example of each type.

One data type is dates that can be implemented in different formats. 
Example: 
CREATE TABLE workouts (
    date DATE, //this will be formatted as such: yyyy-mm-dd
    workout_type text
);

Another data type is the character types: CHAR, VARCHAR, and text
You can set limits as to how many characters can be in CHAR with parenthesis.
Example:
CREATE TABLE some_characters(
    x_characters CHAR (5)
)

4. Decide how to create a new table to hold a list of people invited to a wedding dinner. The table needs to have first and last names, whether they sent in their RSVP, the number of guests they are bringing, and the number of meals (1 for adults and 1/2 for children).

    a. Which data type would you use to store each of the following pieces of information?
        - First and last name: text
        - Whether they sent in their RSVP: boolean
        - Number of guests: integer
        - Number of meals: integer
    
    b. Write a command that creates the table to track the wedding dinner.
    `createdb -U postgres -w wedding_dinner`

    c. Write a command that adds a column to track whether the guest sent a thank you card.
    ALTER COLUMN wedding_dinner;
    ADD COLUMN thank_you boolean;

    d. You have decided to move the data about the meals to another table, so write a command to remove the column storing the number meals from the wedding table.
    ALTER COLUMN wedding_dinner;
    DROP COLUMN number_meals;

    e. The guests will need a place to sit at the reception, so write a command that adds a column for table number.
    ALTER COLUMN wedding_dinner;
    ADD COLUMN table_number;

    f. The wedding is over and we do not need to keep this information, so write a command that deletes the table numbers from the database.
    ALTER COLUMN wedding_dinner;
    DROP COLUMN table_number;


5. Write a command to create a new table to hold the books in a library with the columns ISBN, title, author, genre, publishing date, number of copies, and available copies.

    CREATE TABLE books (
        ISBN integer,
        title text,
        author text,
        genre text,
        publishing_date date,
        number_of_copies integer,
        available_copies integer
    );

    a. Find three books and add their information to the table.

    INSERT INTO books (ISBN, title, author, genre, publishing_date, number_of_copies, available_copies)
    VALUES
    (9788026874256, '1984', 'George Orwell', 'Political Fiction', 6/8/1949, 15, 7),
    (9781724757623, 'The Prophet', 'Kahlil Gibran', 'Prose poetry', 1923, 23, 21),
    (9789612793104, 'Siddhartha', 'Herman Hesse', 'Fiction', 1922, 9, 3); 

    b. Someone has just checked out one of the books. Change the number of available copies to 1 fewer.

    UPDATE books SET available_copies=20 WHERE title='The Prophet';

    c. Now one of the books has been added to the banned books list. Remove it from the table.

    DELETE FROM books WHERE title='1984';


    6. Write a command to make a new table to hold spacecrafts. Information should include id, name, year launched, country of origin, a brief description of the mission, orbiting body, if it is currently operating, and its approximate miles from Earth. In addition to the table creation, provide commands that perform the following operations:

    CREATE TABLE spacecrafts (
        id integer,
        name text,
        year_launched date,
        origin_country text,
        mission_description text,
        orbiting_body text,
        operational boolean,
        miles_from_Earth integer
    );
    

        a. Add three non-Earth-orbiting satellites to the table.

        INSERT INTO spacecrafts (id, name, year_launched, origin_country, mission_description, orbiting_body, operational, miles_from_Earth)
        VALUES
        (981, 'Artemis P1/P2', 02/17/2007, USA, 'Studies effect of solar wind on Moon', 'Earth's moon', true, 100000),
        (982, 'Lunar Reconnaissance Orbiter', 06/18/2009, USA, 'Identify safe landing sites on moon', 'Earth's moon', true, 250000),
        (983, 'Voyager 1', 09/05/1977, USA, 'Investigate Jupiter and Saturn', 'Jupiter & Saturn', true, 1000000000);

        b. Remove one of the satellites from the table since it has just crashed into the planet.

        DELETE FROM spacecrafts WHERE id=982;

        c. Edit another satellite because it is no longer operating and change the value to reflect that.

        UPDATE FROM spacecrafts SET operational=false WHERE id=981;


7. Write a command to create a new table to hold the emails in your inbox. This table should include an id, the subject line, the sender, any additional recipients, the body of the email, the timestamp, whether or not you have read the email, and the id of the email chain it's in. Also provide commands that perform the following operations:

    CREATE TABLE inbox (
        id integer,
        subject text,
        sender text,
        additional_recipients text,
        body text,
        time_stamp timestamp,
        read boolean,
        chain_id integer
    );

    a. Add three new emails to the inbox.

    INSERT INTO inbox (id, subject, sender, additional_recipients, body, timestamp, read, chain_id)
    VALUES
    (451, 'Build ready', 'brady@waitrapp.com', 'alexis@waitrapp.com', 'Here's the link for the new build.', '2018-08-22 14:40:26-07', true, 798),
    (6458, 'New managers', 'travis@waitrapp.com', 'engineering@waitrapp.com', 'Our new managers are Brady & Alex.', '2018-06-15 09:31:47-07', true, 632),
    (555, 'Share Thanksgiving Campaign', 'katie@waitrapp.com', 'everyone@waitrapp.com', 'Read for details about the campaign.', '2018-10-09 13:30:16-07', false, 8545);

    b. You deleted one of the emails, so write a command to remove the row from the inbox table.

    DELETE FROM inbox
    WHERE id=451;

    c. You started reading an email but just heard a crash in another room. Mark the email as unread before investigating the crash, so you can come back and read it later.

    UPDATE FROM inbox SET read=false WHERE id=6458;